---
# tasks file for aws-vpc

- name: create VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr }}"
    region: "{{ region }}"
    state: present
  register: myvpc

- name: Create variable for VPC ID
  set_fact:
    vpc_id: "{{ myvpc.vpc.id }}"

- name: associate pubsubnet to the VPC
  ec2_vpc_subnet:
   state: present
   vpc_id: "{{ vpc_id }}" 
   region: "{{ region }}"
   az: "{{ region }}a"
   cidr: "{{ subnet_cidr_pub }}"
   map_public: yes
   resource_tags:
     Name: "{{ subnet_public }}"
  register: pubsubnet

- name: associate prisubnet to the VPC
  ec2_vpc_subnet:
   state: present
   vpc_id: "{{ vpc_id }}"
   region: "{{ region }}"
   az: "{{ region }}b"
   cidr: "{{ subnet_cidr_pri1 }}"
   map_public: no
   resource_tags:
     Name: "{{ subnet_private1 }}"
  register: pri1subnet

- name: associate pri2subnet to the VPC
  ec2_vpc_subnet:
   state: present
   vpc_id: "{{ vpc_id }}"
   region: "{{ region }}"
   az: "{{ region }}c"
   cidr: "{{ subnet_cidr_pri2 }}"
   map_public: no
   resource_tags:
     Name: "{{ subnet_private2 }}"
  register: pri2subnet

- rds_subnet_group:
    state: absent
    region: "{{ region }}"
    name: dbsg2

- name: create Multi-AZ DB subnet group
  rds_subnet_group:
   name: dbsg2
   state: present
   region: "{{ region }}"
   description: DB Subnet Group 2
   subnets:
     - "{{ pri1subnet.subnet.id }}"
     - "{{ pri2subnet.subnet.id }}"

 
- name: create IGW
  ec2_vpc_igw:
   vpc_id: "{{ vpc_id }}"
   region: "{{ region }}"
   state: "present"
   tags:
     Name: "{{ igw_name }}"
  register: igw

- name: Create new nat gateway and allocate new EIP.
  ec2_vpc_nat_gateway:
    state: present
    subnet_id: "{{ pubsubnet.subnet.id }}"
    wait: yes
    region: "{{ region }}" 
  register: new_nat_gateway

- name: public Route IGW
  ec2_vpc_route_table:
   vpc_id: "{{ vpc_id }}"
   region: "{{ region }}"
   subnets:
     - "{{ pubsubnet.subnet.id }}"
   routes:
     - dest: 0.0.0.0/0
       gateway_id: "{{ igw.gateway_id  }}"
   tags:
     Name: "{{ route_pub }}"

- name: private Route IGW
  ec2_vpc_route_table:
   vpc_id: "{{ vpc_id }}"
   region: "{{ region }}"
   routes:
     - dest: 0.0.0.0/0
       gateway_id: "{{ new_nat_gateway.nat_gateway_id }}"
   subnets:
     - "{{ pri1subnet.subnet.id }}"
   tags:
     Name: "{{ route_pri1 }}"

- name: database Route IGW
  ec2_vpc_route_table:
   vpc_id: "{{ vpc_id }}"
   region: "{{ region }}"
   routes:
     - dest: 0.0.0.0/0
       gateway_id: "{{ new_nat_gateway.nat_gateway_id }}"
   subnets:
     - "{{ pri2subnet.subnet.id }}"
   tags:
     Name: "{{ route_pri2 }}"

 
- name: Create public Security Group
  ec2_group:
   name: public Security Group
   description: DMZ Security1 Group
   vpc_id: "{{ vpc_id }}"
   region: "{{ region }}"
   rules:
     - proto: tcp
       from_port: 80
       to_port: 80 
       cidr_ip: 0.0.0.0/0
     - proto: tcp
       from_port: 22
       to_port: 22
       cidr_ip: 0.0.0.0/0
     - proto: tcp
       from_port: 443
       to_port: 443
       cidr_ip: 0.0.0.0/0
  register: security1_group

- name: Create private Security Group
  ec2_group:
   name: private Security Group
   description: DMZ Security2 Group
   vpc_id: "{{ vpc_id }}"
   region: "{{ region }}"
   rules:
     - proto: tcp
       from_port: 22
       to_port: 22
       group_id: "{{ security1_group.group_id }}"
     - proto: tcp
       from_port: 80
       to_port: 80
       group_id: "{{ security1_group.group_id }}"
     - proto: tcp
       from_port: 443
       to_port: 443
       group_id: "{{ security1_group.group_id }}"
     - proto: tcp
       from_port: 8080
       to_port: 8080
       group_id: "{{ security1_group.group_id }}"
     - proto: icmp
       from_port: -1
       to_port: -1
       group_id: "{{ security1_group.group_id }}"
  register: security2_group

- name: Create database Security Group
  ec2_group:
   name: database Security Group
   description: DMZ Security3 Group
   vpc_id: "{{ vpc_id }}"
   region: "{{ region }}"
   rules:
     - proto: tcp
       from_port: 3306
       to_port: 3306
       group_id: "{{ security2_group.group_id }}"
  register: security3_group

- name: create a new ec2 key pair
  ec2_key:
   name: ec2_keypair
   region: "{{ region }}"
  register: keypair
 
- name: Copy EC2 Private Key locally so it can be later on used to SSH into the instance
  copy: content="{{ keypair.key.private_key }}" dest={{ ec2_key_directory }}key.pem
  when: keypair.changed == true

- name: Provisioning RDS Instance
  rds:
   command: create
   wait: yes
   multi_zone: yes
   region: "{{ region }}"
   subnet: dbsg2
   vpc_security_groups: "{{ security3_group.group_id }}"
   instance_name: "myrds"
   db_engine: MySQL
   size: 10
   db_name: "zippyopsdb"
   instance_type: db.t2.micro
   engine_version: "5.6.40"
   username: "admin"
   password: "zippyops"
  register: rds
  ignore_errors: yes

- name: Create private EC2 server
  ec2:
   image: ami-0d8e27447ec2c8410
   wait: yes
   instance_type: t2.micro 
   region: "{{ region }}"
   group_id: "{{ security2_group.group_id }}"
   vpc_subnet_id: "{{ pri1subnet.subnet.id }}"
   key_name: "{{ keypair.key.name }}"
   instance_tags:
     Name: private1_instance
   count_tag:
     Name: apacheserver
   user_data: |
              #!/bin/bash
              sudo yum update -y
              cd /home/
              sudo su
              sudo yum install git -y
              sudo yum install -y java-1.8.0-openjdk-devel
              cd /home/ 
              sudo yum install mysql -y
              sudo yum install maven -y
              sudo git clone https://github.com/Praveenkumarm373/tomcat.git
              sudo git clone https://github.com/Praveenkumarm373/myjdbc.git
              sudo yum install tomcat tomcat-webapps tomcat-admin-webapps -y
              cd /home/myjdbc
              sudo mvn clean install
              sudo rm -rf /usr/share/tomcat/conf/tomcat-users.xml
              sudo mv /home/tomcat/tomcat-users.xml /usr/share/tomcat/conf/tomcat-users.xml
              sudo mv /home/myjdbc/target/*.war /var/lib/tomcat/webapps/myjdbc.war
              sudo rm -rf /home/tomcat
              sudo rm -rf /home/myjdbc
              mysql -h myrds.ck63qq2etfea.eu-west-2.rds.amazonaws.com -u admin -pzippyops -D zippyopsdb -e "create table registration (name varchar(30),email varchar(30) primary key,gender varchar(7),password varchar(30))"
              sudo service tomcat start
   exact_count: 1

- name: Initializing Kubernetes cluster
  shell: aws ec2 describe-instances --filter "Name=tag:Name,Values=private1_instance" "Name=instance-state-name,Values=running" | grep "PrivateIpAddress" | grep "\"," | awk -F"\"" '{print $4}' 
  register: output

- name: Create public EC2 server
  ec2:
   image: ami-0d8e27447ec2c8410
   wait: yes
   instance_type: t2.micro
   region: "{{ region }}"
   group_id: "{{ security1_group.group_id }}"
   vpc_subnet_id: "{{ pubsubnet.subnet.id }}"
   key_name: "{{ keypair.key.name }}"
   instance_tags:
     Name: public_instance
   count_tag:
     Name: apacheserver
   user_data: |
              #!/bin/bash
              sudo yum update -y
              sudo yum install git -y
              sudo su
              sudo echo "{{ output.stdout }}" > /home/bootstrap.sh
              cd /home/
              sudo git clone https://github.com/Praveenkumarm373/tomcat.git
              sudo yum install -y java-1.8.0-openjdk-devel
              sudo amazon-linux-extras install nginx1.12 -y
              sudo rm -rf /etc/nginx/nginx.conf
              sudo mv /home/tomcat/nginx.conf /etc/nginx/nginx.conf
              sudo sed -i 's/server 10.0.2.10:8080;/server {{ output.stdout }}:8080;/g' /etc/nginx/nginx.conf
              sudo rm -rf /home/tomcat
              sudo service nginx start
   exact_count: 1

